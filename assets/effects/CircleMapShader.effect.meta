{
  "ver": "1.0.25",
  "uuid": "f05d943a-35a6-43d9-abd1-8c9f1f294853",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_time;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  float time = cc_time.x;\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_CIRCLE_MAP\nuniform float positionX;\nuniform float positionY;\nuniform float negaColor;\n#endif\nfloat PI = 3.14159265358979323846;\nfloat remap (float mapValue, float inputMin, float inputMax, float outputMin, float outputMax)\n{\n  return (mapValue - inputMin) * ((outputMax - outputMin) / (inputMax - inputMin)) + outputMin;\n}\nvoid main ()\n{\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 iResolution = vec2(1,1);\n  vec2 uv = v_uv0 / iResolution;\n  uv = v_uv0;\n  float w = (0.5 - (uv.x));\n  float h = (0.5 - uv.y);\n  float distanceFromCenter = sqrt(w * w + h * h);\n  float angle = remap(atan(h, w), -PI, PI, 0.0, 1.0);\n  angle = mod(angle + positionX, 1.0);\n  #if USE_TEXTURE\n    o *= texture2D(texture, vec2(angle, distanceFromCenter * 0.2 + positionY * 0.1));\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  if(negaColor > 0.0)\n  {\n    o.x = 1.0 - o.x;\n    o.y = 1.0 - o.y;\n    o.z = 1.0 - o.z;\n  }\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  float time = cc_time.x;\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_CIRCLE_MAP\nuniform CircleMap{\n  float positionX;\n  float positionY;\n  float negaColor;\n};\n#endif\nfloat PI = 3.14159265358979323846;\nfloat remap (float mapValue, float inputMin, float inputMax, float outputMin, float outputMax)\n{\n  return (mapValue - inputMin) * ((outputMax - outputMin) / (inputMax - inputMin)) + outputMin;\n}\nvoid main ()\n{\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 iResolution = vec2(1,1);\n  vec2 uv = v_uv0 / iResolution;\n  uv = v_uv0;\n  float w = (0.5 - (uv.x));\n  float h = (0.5 - uv.y);\n  float distanceFromCenter = sqrt(w * w + h * h);\n  float angle = remap(atan(h, w), -PI, PI, 0.0, 1.0);\n  angle = mod(angle + positionX, 1.0);\n  #if USE_TEXTURE\n    o *= texture(texture, vec2(angle, distanceFromCenter * 0.2 + positionY * 0.1));\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  if(negaColor > 0.0)\n  {\n    o.x = 1.0 - o.x;\n    o.y = 1.0 - o.y;\n    o.z = 1.0 - o.z;\n  }\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}