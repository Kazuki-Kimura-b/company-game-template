// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd. 

//---------------------------------------------------------------------------
// 極座標に変換（テクスチャのサイズが513以上じゃないと表示できないバグがある）
//---------------------------------------------------------------------------


CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }

        positionX: {
          value: 0.0,
          editor: {
            tooltip: "左右の回転"
          }
        }
        positionY: {
          value: 0.0,
          editor: {
            tooltip: "奥、手前の移動"
          }
        }
        negaColor: {
          value: 0.0,
          editor: {
            tooltip: "色反転する"
          }
        }
}%


CCProgram vs %{
  precision highp float;    //精度の定義

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;   // attributeからinに変更。cocos-engineから頂点情報を受け取る
  in vec4 a_color;      // cocos-engineから色情報を受け取る
  out vec4 v_color;     // varyingからoutに変更。フラグメントシェーダーに色情報を渡す

  #if USE_TEXTURE       // テクスチャを使用する場合
  in vec2 a_uv0;        // 一般的なシェーダーのtexCoord(テクスチャの情報)のこと。cocos-engineからテクスチャ情報を受け取る
  out vec2 v_uv0;       // フラグメントシェーダーにテクスチャ情報を渡す
  #endif


  void main () {

    vec4 pos = vec4(a_position, 1);     // vec3をvec4に変換

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;   // 座標情報を調整するための変数cc_matViewProj と頂点座標を掛け合わせる
    #endif

    float time = cc_time.x;   //起動してからの経過時間が取れるっぽい

    //pos.x += sin(time * 10.0) * 0.1;    //各頂点を左右にスイング

    #if USE_TEXTURE
    v_uv0 = a_uv0;          // テクスチャ情報はそのままフラグメントシェーダーへ渡す
    #endif

    v_color = a_color;      // 色情報はそのままフラグメントシェーダーへ渡す

    gl_Position = pos;      // OpenGLで処理する頂点情報に渡す
  }
}%


CCProgram fs %{
  precision highp float;    //精度の定義
  
  #include <alpha-test>

  in vec4 v_color;        // バーテックスシェーダーから受け取った色情報がここに入る

  #if USE_TEXTURE
  in vec2 v_uv0;          // バーテックスシェーダーから受け取ったテクスチャ情報がここに入る(texCoord)
  uniform sampler2D texture;    // エディタのマテリアルのプロパティ画面からの入力値がここに入る（と予想）
  #endif


  #if USE_CIRCLE_MAP
  uniform CircleMap{
    float positionX;
    float positionY;
    float negaColor;
  };
  #endif


  float PI = 3.14159265358979323846; 

  float remap (float mapValue, float inputMin, float inputMax, float outputMin, float outputMax)
  {
    return (mapValue - inputMin) * ((outputMax - outputMin) / (inputMax - inputMin)) + outputMin;
  }



  void main ()
  {
    vec4 o = vec4(1, 1, 1, 1);    // OpenGLに色情報を渡すためのvec4の型を作る。これにテクスチャ情報や色情報を掛け合わせる

    vec2 iResolution = vec2(1,1);
    vec2 uv = v_uv0 / iResolution;

    uv = v_uv0;
    float w = (0.5 - (uv.x));
    float h = (0.5 - uv.y);



    float distanceFromCenter = sqrt(w * w + h * h);   //1.0は時間
    float angle = remap(atan(h, w), -PI, PI, 0.0, 1.0);


    angle = mod(angle + positionX, 1.0);
    

    #if USE_TEXTURE
      //ループさせるには第2引数のvec2()のyが0.2～1.0でループすること。distanceFromCenterは1.0と考えていい
      //positionY が 0 ~ 8 を繰り返すとループできる
      o *= texture(texture, vec2(angle, distanceFromCenter * 0.2 + positionY * 0.1));
      #if CC_USE_ALPHA_ATLAS_TEXTURE
        o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    
    o *= v_color;     // バーテックスシェーダーから受け取ったカラー情報をここで用意した色情報に掛け合わせる


    if(negaColor > 0.0)
    {
      o.x = 1.0 - o.x;
      o.y = 1.0 - o.y;
      o.z = 1.0 - o.z;
    }

    ALPHA_TEST(o);

    gl_FragColor = o;     // OpenGLで処理する色情報に渡す
  }
}%
